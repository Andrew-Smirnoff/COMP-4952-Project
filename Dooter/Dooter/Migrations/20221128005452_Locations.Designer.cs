// <auto-generated />
using System;
using Dooter.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dooter.Migrations
{
    [DbContext(typeof(LocationDBContext))]
    [Migration("20221128005452_Locations")]
    partial class Locations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dooter.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<double?>("latitude")
                        .HasColumnType("float");

                    b.Property<double?>("longitude")
                        .HasColumnType("float");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = 1,
                            Name = "Gothic tree",
                            Rating = 3.5,
                            latitude = 1.0,
                            longitude = 1.0
                        },
                        new
                        {
                            LocationID = 2,
                            Name = "Gothic tree 2 electric boogaloo",
                            Rating = 3.5,
                            latitude = 1.0,
                            longitude = 1.0
                        },
                        new
                        {
                            LocationID = 3,
                            Name = "Gothic tree 3 how many gothic trees are there?",
                            Rating = 3.5,
                            latitude = 1.0,
                            longitude = 1.0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
